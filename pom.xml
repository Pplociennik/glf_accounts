<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.github.pplociennik</groupId>
        <artifactId>pp-base</artifactId>
        <version>1.1.0-SNAPSHOT</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.goaleaf</groupId>
    <artifactId>glf-accounts</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <name>glf-accounts</name>
    <description>Accounts service for Goaleaf server project.</description>
    <developers>
        <developer>
            <name>Pplociennik</name>
            <url>https://github.com/Pplociennik</url>
        </developer>
    </developers>

    <properties>
        <java.version>17</java.version>
    </properties>

    <dependencies>

        <!--   Spring dependencies.     -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>4.2.0</version>
        </dependency>
        <!--   Tests     -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--     Eureka       -->
        <dependency>
            <groupId>com.netflix.eureka</groupId>
            <artifactId>eureka-client</artifactId>
        </dependency>
        <!--   Micrometer     -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <!--    Webflux    -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>

        <!--   Others.     -->
        <dependency>
            <groupId>com.github.pplociennik</groupId>
            <artifactId>pp-commons</artifactId>
            <version>${version.pp-commons}</version>
        </dependency>
        <dependency>
            <groupId>com.github.pplociennik</groupId>
            <artifactId>pp-modinfo</artifactId>
            <version>${version.pp-modinfo}</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!--   Open Telemetry     -->
        <dependency>
            <groupId>io.opentelemetry.javaagent</groupId>
            <artifactId>opentelemetry-javaagent</artifactId>
            <version>${version.opentelemetry-javaagent}</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <!--    Spring Cloud dependencies    -->
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${version.resources-plugin}</version>
                <executions>
                    <!-- Filtering -->
                    <execution>
                        <id>filter</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>
                                        src/main/resources
                                    </directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- 'dev' profile -->
        <profile>
            <id>dev</id>
            <activation>
                <property>
                    <name>spring.profiles.active</name>
                    <value>dev</value>
                </property>
                <activeByDefault>true</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                </dependency>
            </dependencies>
        </profile>
        <!-- 'qa' profile -->
        <profile>
            <id>qa</id>
            <activation>
                <property>
                    <name>spring.profiles.active</name>
                    <value>qa</value>
                </property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.mysql</groupId>
                    <artifactId>mysql-connector-j</artifactId>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
        <!-- 'prod' profile -->
        <!-- TODO: This is a placeholder. No prod environment yet. -->
        <profile>
            <id>prod</id>
            <activation>
                <property>
                    <name>spring.profiles.active</name>
                    <value>prod</value>
                </property>
                <activeByDefault>false</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.mysql</groupId>
                    <artifactId>mysql-connector-j</artifactId>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>

        <!--    Properties necessary for building a docker image on linux systems.    -->
        <profile>
            <id>linux</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <image-exec-id>run-sh-file</image-exec-id>
                <image-exec-executable>sh</image-exec-executable>
                <image-exec-argument>-c</image-exec-argument>
                <image-exec-script-file>${project.basedir}/docker/build.sh</image-exec-script-file>
            </properties>
        </profile>

        <!--    Properties necessary for building docker image on windows systems. Active by default.    -->
        <profile>
            <id>windows</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <image-exec-id>run-bat-file</image-exec-id>
                <image-exec-executable>cmd</image-exec-executable>
                <image-exec-argument>/c</image-exec-argument>
                <image-exec-script-file>${project.basedir}/docker/build.bat</image-exec-script-file>
            </properties>
        </profile>

        <!--    Builds a docker image during the maven build.    -->
        <profile>
            <id>withDockerImage</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.mysql</groupId>
                    <artifactId>mysql-connector-j</artifactId>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>copy-opentelemetry</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <includeArtifactIds>opentelemetry-javaagent</includeArtifactIds>
                                    <includeTypes>jar</includeTypes>
                                    <outputDirectory>${project.basedir}/docker</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <type>jar</type>
                                    <overWrite>false</overWrite>
                                    <destFileName>glf-accounts.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${project.basedir}/docker</outputDirectory>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${version.maven-exec-plugin}</version>
                        <executions>
                            <execution>
                                <id>${image-exec-id}</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${image-exec-executable}</executable>
                                    <arguments>
                                        <argument>${image-exec-argument}</argument>
                                        <argument>${image-exec-script-file}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>

</project>
